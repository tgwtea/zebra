// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tczukc3QRaUy2S2e1ykNYP
// Component: Ekn1vjcRUV1J
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: dPDEhKmGLUtA/component
import Section from "../../Section"; // plasmic-import: recmZTLggqWV3/component
import Button from "../../Button"; // plasmic-import: bMyck7Xc0NdJR/component
import FeatureCard from "../../FeatureCard"; // plasmic-import: HuH8EgcgSbNk/component
import Testimonial from "../../Testimonial"; // plasmic-import: FNInM56-jFxnp/component
import HomeCta from "../../HomeCta"; // plasmic-import: 64-siPhMyGAZ/component
import Footer from "../../Footer"; // plasmic-import: HfJG6oNJPD_e/component
import { useScreenVariants as useScreenVariantsul3OqjQpMtrtZ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ul3oqjQPMtrtZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_simple_light_landing_page.module.css"; // plasmic-import: tczukc3QRaUy2S2e1ykNYP/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: Ekn1vjcRUV1J/css
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: LOWALOghoPHRm/icon
import LightningIcon from "./icons/PlasmicIcon__Lightning"; // plasmic-import: XEjHlELEE0_vQ/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer"; // plasmic-import: Bl29Oqur2ZZ2B/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil"; // plasmic-import: _9Sz4uozTT_Tt/icon
import FacebookLogoIcon from "./icons/PlasmicIcon__FacebookLogo"; // plasmic-import: i8FQWiJCkHi7I/icon
import TinderLogoIcon from "./icons/PlasmicIcon__TinderLogo"; // plasmic-import: joOQOXErCuVrb/icon
import AirbnbLogoIcon from "./icons/PlasmicIcon__AirbnbLogo"; // plasmic-import: HrhwYbe9BG5Yb/icon
import HubspotLogoIcon from "./icons/PlasmicIcon__HubspotLogo"; // plasmic-import: FewgmqrFw_hi8/icon
import AmazonLogoIcon from "./icons/PlasmicIcon__AmazonLogo"; // plasmic-import: dlGf9kV0urvzJ/icon

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsul3OqjQpMtrtZ()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Section
            data-plasmic-name={"topSection"}
            data-plasmic-override={overrides.topSection}
            className={classNames("__wab_instance", sty.topSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mpQbt)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dO)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Ekxq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vvzx3
                    )}
                  >
                    {"Getting a barcode doesn't have to be "}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cvRod
                    )}
                  >
                    {"costly."}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTc9J
                  )}
                >
                  {
                    "Need a UPC or EAN barcode for your product? For just 25 USD, you can own your barcode for life â€” no membership fees, no hidden charges, no bullsh*t."
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s6Nvc)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__rokNg)}
                  color={"blue"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__ftKia)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jmbAx
                    )}
                  >
                    {"Get your barcodes now"}
                  </div>
                </Button>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__tSvol)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gVuk)}
                  displayHeight={"388px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/upcAndEanBarcodeNumberpng.png",
                    fullWidth: 618,
                    fullHeight: 405,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </Section>

          <Section
            data-plasmic-name={"solutions"}
            data-plasmic-override={overrides.solutions}
            className={classNames("__wab_instance", sty.solutions)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s8V3D
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "When you choose to get a barcode from GS1, you don't actually "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontStyle: "italic" }}
                  >
                    {"own "}
                  </span>
                  <React.Fragment>
                    {
                      "your barcode. You're simply renting the barcode at a yearly fee, and these fees can get really expensive over time.\n\nBuying a Zebra Barcode means that you get FULL ownership over your barcode number for "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontStyle: "italic" }}
                  >
                    {"life"}
                  </span>
                  <React.Fragment>
                    {
                      ". \n\nYou already own your business. Why not own your barcodes too?"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            }
            title={"Pay once, own it for life"}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__xtjSa)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sPopq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ic97B
                    )}
                  >
                    {"Our barcodes, explained"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pBWqV
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"We use the "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"exact "}
                      </span>
                      <React.Fragment>
                        {
                          "same UPC and EAN barcode system as GS1. That means you're free to sell your product anywhere you want, be it on online marketplaces or in department stores worldwide."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__hyfLb
                    )}
                    description={
                      "Zebra Barcodes is accepted by over 100,000 retailers worldwide (yes, we've really tried and tested)"
                    }
                    iconBack={
                      <LightningIcon
                        className={classNames(projectcss.all, sty.svg__bxCDx)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={
                      "Internationally recognised EAN-13 and UPC-12 barcode number"
                    }
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__g2CnF
                    )}
                    description={
                      "A guarantee certificate secures you as the ONLY legal owner of your barcode number, ensuring that no one can ever steal it and use it in malicious ways."
                    }
                    iconBack={
                      <HammerIcon
                        className={classNames(projectcss.all, sty.svg__gIv8Z)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={
                      "Free guarantee certificate for every barcode purchase"
                    }
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__u1P1O
                    )}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Iucv
                        )}
                      >
                        {
                          "The International Barcodes Database allows anyone on the web to search any UPC, EAN and ISBN code to find product information including images, pricing, reviews and places to purchase online."
                        }
                      </div>
                    }
                    iconBack={
                      <PencilIcon
                        className={classNames(projectcss.all, sty.svg__mqSZx)}
                        role={"img"}
                      />
                    }
                    long={true}
                    title={
                      "Free registration on the International Barcodes Database"
                    }
                  />
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__qiI7)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jwL3)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/simple_light_landing_page/images/simpleProject.png",
                    fullWidth: 1000,
                    fullHeight: 924,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </Section>

          <Section
            data-plasmic-name={"validation"}
            data-plasmic-override={overrides.validation}
            className={classNames("__wab_instance", sty.validation)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              "We're not new to this business â€” in fact, as business owners ourselves, we understand the struggles every business owner faces. That's why we started Zebra Barcodes in order to make getting a barcode number for your product simple, affordable and transparent. "
            }
            title={"Trusted by over 20,000 companies all over the world"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mqbwf)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__meO84)}
              >
                <FacebookLogoIcon
                  className={classNames(projectcss.all, sty.svg___0SmiW)}
                  role={"img"}
                />

                <TinderLogoIcon
                  className={classNames(projectcss.all, sty.svg__heQje)}
                  role={"img"}
                />

                <AirbnbLogoIcon
                  className={classNames(projectcss.all, sty.svg___6OxaE)}
                  role={"img"}
                />

                <HubspotLogoIcon
                  className={classNames(projectcss.all, sty.svg__rzOjS)}
                  role={"img"}
                />

                <AmazonLogoIcon
                  className={classNames(projectcss.all, sty.svg__c6YYg)}
                  role={"img"}
                />
              </p.Stack>

              {true ? (
                <Testimonial
                  data-plasmic-name={"testimonial"}
                  data-plasmic-override={overrides.testimonial}
                  className={classNames("__wab_instance", sty.testimonial)}
                />
              ) : null}
            </p.Stack>
          </Section>

          <Button
            className={classNames("__wab_instance", sty.button__jdDug)}
            color={"blue"}
            endIcon={
              <RightArrowIcon
                className={classNames(projectcss.all, sty.svg__n8X63)}
                role={"img"}
              />
            }
            showEndIcon={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u0TGi
              )}
            >
              {"Get your barcodes today"}
            </div>
          </Button>

          <HomeCta
            data-plasmic-name={"homeCta"}
            data-plasmic-override={overrides.homeCta}
            className={classNames("__wab_instance", sty.homeCta)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "solutions",
    "columns",
    "validation",
    "testimonial",
    "homeCta",
    "footer"
  ],

  header: ["header"],
  topSection: ["topSection"],
  solutions: ["solutions", "columns"],
  columns: ["columns"],
  validation: ["validation", "testimonial"],
  testimonial: ["testimonial"],
  homeCta: ["homeCta"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    solutions: makeNodeComponent("solutions"),
    columns: makeNodeComponent("columns"),
    validation: makeNodeComponent("validation"),
    testimonial: makeNodeComponent("testimonial"),
    homeCta: makeNodeComponent("homeCta"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
